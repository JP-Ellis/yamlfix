{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A simple opinionated yaml formatter that keeps your comments! Installing \u00b6 pip install yamlfix Usage \u00b6 Imagine we've got the following source code: book_library : - title : Why we sleep author : Matthew Walker - title : Harry Potter and the Methods of Rationality author : Eliezer Yudkowsky It has the following errors: There is no --- at the top. The indentation is all wrong. After running yamlfix the resulting source code will be: --- book_library : - title : Why we sleep author : Matthew Walker - title : Harry Potter and the Methods of Rationality author : Eliezer Yudkowsky yamlfix can be used both as command line tool and as a library. As a command line tool: $: yamlfix file.yaml As a library: from yamlfix import fix_files fix_files ([ 'file.py' ]) If instead of reading from a file you want to fix the code saved into a variable, use fix_code : { ! examples / fix_code . py ! } Features \u00b6 yamlfix will do the following changes in your code: Add the header --- to your file. Correct truthy strings : 'True' -> true, 'no' -> 'false' Remove unnecessary apostrophes: title: 'Why we sleep' -> title: Why we sleep . Correct comments Ensure that there is exactly one newline at the end of each file, to comply with the POSIX standard . References \u00b6 As most open sourced programs, yamlfix is standing on the shoulders of giants, namely: yamlfmt Inspiration and alternative of this program. I created a new one because the pace of their pull requests is really slow, they don't have tests, CI pipelines or documentation. ruyaml A git based community maintained for of ruamel yaml parser. Click Used to create the command line interface. Pytest Testing framework, enhanced by the awesome pytest-cases library that made the parametrization of the tests a lovely experience. Mypy Python static type checker. Flakeheaven Python linter with lots of checks . Black Python formatter to keep a nice style without effort. Autoimport Python formatter to automatically fix wrong import statements. isort Python formatter to order the import statements. PDM Command line tool to manage the dependencies. Mkdocs To build this documentation site, with the Material theme . Safety To check the installed dependencies for known security vulnerabilities. Bandit To finds common security issues in Python code. Contributing \u00b6 For guidance on setting up a development environment, and how to make a contribution to yamlfix , see Contributing to yamlfix .","title":"yamlfix"},{"location":"#installing","text":"pip install yamlfix","title":"Installing"},{"location":"#usage","text":"Imagine we've got the following source code: book_library : - title : Why we sleep author : Matthew Walker - title : Harry Potter and the Methods of Rationality author : Eliezer Yudkowsky It has the following errors: There is no --- at the top. The indentation is all wrong. After running yamlfix the resulting source code will be: --- book_library : - title : Why we sleep author : Matthew Walker - title : Harry Potter and the Methods of Rationality author : Eliezer Yudkowsky yamlfix can be used both as command line tool and as a library. As a command line tool: $: yamlfix file.yaml As a library: from yamlfix import fix_files fix_files ([ 'file.py' ]) If instead of reading from a file you want to fix the code saved into a variable, use fix_code : { ! examples / fix_code . py ! }","title":"Usage"},{"location":"#features","text":"yamlfix will do the following changes in your code: Add the header --- to your file. Correct truthy strings : 'True' -> true, 'no' -> 'false' Remove unnecessary apostrophes: title: 'Why we sleep' -> title: Why we sleep . Correct comments Ensure that there is exactly one newline at the end of each file, to comply with the POSIX standard .","title":"Features"},{"location":"#references","text":"As most open sourced programs, yamlfix is standing on the shoulders of giants, namely: yamlfmt Inspiration and alternative of this program. I created a new one because the pace of their pull requests is really slow, they don't have tests, CI pipelines or documentation. ruyaml A git based community maintained for of ruamel yaml parser. Click Used to create the command line interface. Pytest Testing framework, enhanced by the awesome pytest-cases library that made the parametrization of the tests a lovely experience. Mypy Python static type checker. Flakeheaven Python linter with lots of checks . Black Python formatter to keep a nice style without effort. Autoimport Python formatter to automatically fix wrong import statements. isort Python formatter to order the import statements. PDM Command line tool to manage the dependencies. Mkdocs To build this documentation site, with the Material theme . Safety To check the installed dependencies for known security vulnerabilities. Bandit To finds common security issues in Python code.","title":"References"},{"location":"#contributing","text":"For guidance on setting up a development environment, and how to make a contribution to yamlfix , see Contributing to yamlfix .","title":"Contributing"},{"location":"contributing/","text":"So you've started using yamlfix and want to show your gratitude to the project, depending on your programming skills there are different ways to do so. I don't know how to program \u00b6 There are several ways you can contribute: Open an issue if you encounter any bug or to let us know if you want a new feature to be implemented. Spread the word about the program. Review the documentation and try to improve it. I know how to program in Python \u00b6 If you have some python knowledge there are some additional ways to contribute. We've ordered the issues in milestones , check the issues in the smaller one, as it's where we'll be spending most of our efforts. Try the good first issues , as they are expected to be easier to get into the project. We develop the program with TDD , so we expect any contribution to have it's associated tests. We also try to maintain an updated documentation of the project, so think if your contribution needs to update it. We know that the expected code quality is above average. Therefore it might be changeling to get the initial grasp of the project structure, know how to make the tests, update the documentation or use all the project technology stack. but please don't let this fact discourage you from contributing: If you want to develop a new feature, explain how you'd like to do it in the related issue. If you don't know how to test your code, do the pull request without the tests and we'll try to do them for you. Issues \u00b6 Questions, feature requests and bug reports are all welcome as issues. To report a security vulnerability, please see our security policy instead. To make it as simple as possible for us to help you, please include the output of the following call in your issue: python -c \"import yamlfix.version; print(yamlfix.version.version_info())\" or if you have make installed, you can use make version . Please try to always include the above unless you're unable to install yamlfix or know it's not relevant to your question or feature request. Pull Requests \u00b6 yamlfix is released regularly so you should see your improvements release in a matter of days or weeks. Note Unless your change is trivial (typo, docs tweak etc.), please create an issue to discuss the change before creating a pull request. If you're looking for something to get your teeth into, check out the \"help wanted\" label on github. Development facilities \u00b6 To make contributing as easy and fast as possible, you'll want to run tests and linting locally. tl;dr : use make format to fix formatting, make to run tests and linting & make docs to build the docs. You'll need to have python 3.7 or 3.8, virtualenv, git, and make installed. Clone your fork and go into the repository directory: git clone git@github.com:<your username>/yamlfix.git cd yamlfix Set up the virtualenv for running tests: virtualenv -p ` which python3.7 ` env source env/bin/activate Install yamlfix, dependencies and configure the pre-commits: make install Checkout a new branch and make your changes: git checkout -b my-new-feature-branch Fix formatting and imports: yamlfix uses black to enforce formatting and isort to fix imports. make format Run tests and linting: make There are more sub-commands in Makefile like test-code , test-examples , mypy or security which you might want to use, but generally make should be all you need. If you need to pass specific arguments to pytest use the ARGS variable, for example make test ARGS='-k test_markdownlint_passes' . Build documentation: If you have changed the documentation, make sure it builds the static site. Once built it will serve the documentation at localhost:8000 : make docs Commit, push, and create your pull request. Make a new release: To generate the changelog of the new changes, build the package, upload to pypi and clean the build files use make bump . We'd love you to contribute to yamlfix !","title":"Contributing"},{"location":"contributing/#i-dont-know-how-to-program","text":"There are several ways you can contribute: Open an issue if you encounter any bug or to let us know if you want a new feature to be implemented. Spread the word about the program. Review the documentation and try to improve it.","title":"I don't know how to program"},{"location":"contributing/#i-know-how-to-program-in-python","text":"If you have some python knowledge there are some additional ways to contribute. We've ordered the issues in milestones , check the issues in the smaller one, as it's where we'll be spending most of our efforts. Try the good first issues , as they are expected to be easier to get into the project. We develop the program with TDD , so we expect any contribution to have it's associated tests. We also try to maintain an updated documentation of the project, so think if your contribution needs to update it. We know that the expected code quality is above average. Therefore it might be changeling to get the initial grasp of the project structure, know how to make the tests, update the documentation or use all the project technology stack. but please don't let this fact discourage you from contributing: If you want to develop a new feature, explain how you'd like to do it in the related issue. If you don't know how to test your code, do the pull request without the tests and we'll try to do them for you.","title":"I know how to program in Python"},{"location":"contributing/#issues","text":"Questions, feature requests and bug reports are all welcome as issues. To report a security vulnerability, please see our security policy instead. To make it as simple as possible for us to help you, please include the output of the following call in your issue: python -c \"import yamlfix.version; print(yamlfix.version.version_info())\" or if you have make installed, you can use make version . Please try to always include the above unless you're unable to install yamlfix or know it's not relevant to your question or feature request.","title":"Issues"},{"location":"contributing/#pull-requests","text":"yamlfix is released regularly so you should see your improvements release in a matter of days or weeks. Note Unless your change is trivial (typo, docs tweak etc.), please create an issue to discuss the change before creating a pull request. If you're looking for something to get your teeth into, check out the \"help wanted\" label on github.","title":"Pull Requests"},{"location":"contributing/#development-facilities","text":"To make contributing as easy and fast as possible, you'll want to run tests and linting locally. tl;dr : use make format to fix formatting, make to run tests and linting & make docs to build the docs. You'll need to have python 3.7 or 3.8, virtualenv, git, and make installed. Clone your fork and go into the repository directory: git clone git@github.com:<your username>/yamlfix.git cd yamlfix Set up the virtualenv for running tests: virtualenv -p ` which python3.7 ` env source env/bin/activate Install yamlfix, dependencies and configure the pre-commits: make install Checkout a new branch and make your changes: git checkout -b my-new-feature-branch Fix formatting and imports: yamlfix uses black to enforce formatting and isort to fix imports. make format Run tests and linting: make There are more sub-commands in Makefile like test-code , test-examples , mypy or security which you might want to use, but generally make should be all you need. If you need to pass specific arguments to pytest use the ARGS variable, for example make test ARGS='-k test_markdownlint_passes' . Build documentation: If you have changed the documentation, make sure it builds the static site. Once built it will serve the documentation at localhost:8000 : make docs Commit, push, and create your pull request. Make a new release: To generate the changelog of the new changes, build the package, upload to pypi and clean the build files use make bump . We'd love you to contribute to yamlfix !","title":"Development facilities"},{"location":"editor_integration/","text":"For a smoother experience, you can run yamlfix automatically each time each time you save your file in your editor or when you run git commit . Vim \u00b6 To integrate yamlfix into Vim, I recommend using the ale plugin . If you are new to ALE, check this post . ale is configured to run yamlfix automatically by default. pre-commit \u00b6 You can run yamlfix before we do a commit using the pre-commit framework. If you don't know how to use it, follow these guidelines . You'll need to add the following lines to your project's .pre-commit-config.yaml file. repos : - repo : https://github.com/lyz-code/yamlfix/ rev : master hooks : - id : yamlfix","title":"Editor Integration"},{"location":"editor_integration/#vim","text":"To integrate yamlfix into Vim, I recommend using the ale plugin . If you are new to ALE, check this post . ale is configured to run yamlfix automatically by default.","title":"Vim"},{"location":"editor_integration/#pre-commit","text":"You can run yamlfix before we do a commit using the pre-commit framework. If you don't know how to use it, follow these guidelines . You'll need to add the following lines to your project's .pre-commit-config.yaml file. repos : - repo : https://github.com/lyz-code/yamlfix/ rev : master hooks : - id : yamlfix","title":"pre-commit"},{"location":"reference/","text":"yamlfix.services \u00b6 Define all the orchestration functionality required by the program to work. Classes and functions that connect the different domain model objects with the adapters and handlers to achieve the program's purpose. fix_code ( source_code ) \u00b6 Fix yaml source code to correct the format. It corrects these errors Add --- at the beginning of the file. Correct truthy strings: 'True' -> true, 'no' -> 'false' Remove unnecessary apostrophes: title: 'Why we sleep' -> title: Why we sleep . Parameters: Name Type Description Default source_code str Source code to be corrected. required Returns: Type Description str Corrected source code. Source code in yamlfix/services.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 def fix_code ( source_code : str ) -> str : \"\"\"Fix yaml source code to correct the format. It corrects these errors: * Add --- at the beginning of the file. * Correct truthy strings: 'True' -> true, 'no' -> 'false' * Remove unnecessary apostrophes: `title: 'Why we sleep'` -> `title: Why we sleep`. Args: source_code: Source code to be corrected. Returns: Corrected source code. \"\"\" # Leave Ansible vaults unmodified if source_code . startswith ( \"$ANSIBLE_VAULT;\" ): return source_code if source_code . startswith ( \"#!\" ): # Skip the shebang line if present, leaving it unmodified eolpos = source_code . find ( \" \\n \" ) + 1 shebang = source_code [: eolpos ] source_code = source_code [ eolpos :] else : shebang = \"\" fixers = [ _fix_truthy_strings , _fix_comments , _fix_jinja_variables , _ruamel_yaml_fixer , _restore_truthy_strings , _restore_double_exclamations , _restore_jinja_variables , _fix_top_level_lists , _add_newline_at_end_of_file , ] for fixer in fixers : source_code = fixer ( source_code ) return shebang + source_code fix_files ( files ) \u00b6 Fix the yaml source code of a list of files. If the input is taken from stdin, it will return the fixed value. Parameters: Name Type Description Default files Files List of files to fix. required Returns: Type Description Optional [ str ] Fixed code retrieved from stdin or None. Source code in yamlfix/services.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def fix_files ( files : Files ) -> Optional [ str ]: \"\"\"Fix the yaml source code of a list of files. If the input is taken from stdin, it will return the fixed value. Args: files: List of files to fix. Returns: Fixed code retrieved from stdin or None. \"\"\" for file_ in files : if isinstance ( file_ , str ): with open ( file_ , \"r\" , encoding = \"utf-8\" ) as file_descriptor : source = file_descriptor . read () file_name = file_ else : source = file_ . read () file_name = file_ . name log . debug ( \"Fixing file %s ...\" , file_name ) fixed_source = fix_code ( source ) if file_name == \"<stdin>\" : return fixed_source if fixed_source != source : if isinstance ( file_ , str ): with open ( file_ , \"w\" , encoding = \"utf-8\" ) as file_descriptor : file_descriptor . write ( fixed_source ) else : file_ . seek ( 0 ) file_ . write ( fixed_source ) file_ . truncate () log . debug ( \"Fixed file %s .\" , file_name ) else : log . debug ( \"Left file %s unmodified.\" , file_name ) return None yamlfix.entrypoints \u00b6 Define the different ways to expose the program functionality. Functions ConsoleColorFormatter \u00b6 Bases: logging . Formatter Custom formatter that prints log levels to the console as colored plus signs. Source code in yamlfix/entrypoints/__init__.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class ConsoleColorFormatter ( logging . Formatter ): \"\"\"Custom formatter that prints log levels to the console as colored plus signs.\"\"\" colors = { logging . DEBUG : GREEN , logging . INFO : CYAN , logging . WARNING : YELLOW , logging . ERROR : RED , } def format ( self , record : logging . LogRecord ) -> str : \"\"\"Format log records as a colored plus sign followed by the log message.\"\"\" color = self . colors . get ( record . levelno , 0 ) self . _style . _fmt = f \"[ \\033 [ { color } m+ \\033 [0m] %(message)s\" # noqa: W0212 return super () . format ( record ) format ( record ) \u00b6 Format log records as a colored plus sign followed by the log message. Source code in yamlfix/entrypoints/__init__.py 27 28 29 30 31 def format ( self , record : logging . LogRecord ) -> str : \"\"\"Format log records as a colored plus sign followed by the log message.\"\"\" color = self . colors . get ( record . levelno , 0 ) self . _style . _fmt = f \"[ \\033 [ { color } m+ \\033 [0m] %(message)s\" # noqa: W0212 return super () . format ( record ) load_logger ( verbose = False ) \u00b6 Configure the Logging logger. Parameters: Name Type Description Default verbose bool Set the logging level to Debug. False Source code in yamlfix/entrypoints/__init__.py 34 35 36 37 38 39 40 41 42 43 def load_logger ( verbose : bool = False ) -> None : \"\"\"Configure the Logging logger. Args: verbose: Set the logging level to Debug. \"\"\" log_level = logging . DEBUG if verbose else logging . INFO logging . basicConfig ( stream = sys . stderr , level = log_level ) for handler in logging . getLogger () . handlers : handler . setFormatter ( ConsoleColorFormatter ()) yamlfix.version \u00b6 Utilities to retrieve the information of the program version. version_info () \u00b6 Display the version of the program, python and the platform. Source code in yamlfix/version.py 11 12 13 14 15 16 17 18 19 20 def version_info () -> str : \"\"\"Display the version of the program, python and the platform.\"\"\" return dedent ( f \"\"\" \\ ------------------------------------------------------------------ yamlfix: { __version__ } Python: { sys . version . split ( \" \" , maxsplit = 1 )[ 0 ] } Platform: { platform . platform () } ------------------------------------------------------------------\"\"\" )","title":"Reference"},{"location":"reference/#yamlfix.services","text":"Define all the orchestration functionality required by the program to work. Classes and functions that connect the different domain model objects with the adapters and handlers to achieve the program's purpose.","title":"services"},{"location":"reference/#yamlfix.services.fix_code","text":"Fix yaml source code to correct the format. It corrects these errors Add --- at the beginning of the file. Correct truthy strings: 'True' -> true, 'no' -> 'false' Remove unnecessary apostrophes: title: 'Why we sleep' -> title: Why we sleep . Parameters: Name Type Description Default source_code str Source code to be corrected. required Returns: Type Description str Corrected source code. Source code in yamlfix/services.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 def fix_code ( source_code : str ) -> str : \"\"\"Fix yaml source code to correct the format. It corrects these errors: * Add --- at the beginning of the file. * Correct truthy strings: 'True' -> true, 'no' -> 'false' * Remove unnecessary apostrophes: `title: 'Why we sleep'` -> `title: Why we sleep`. Args: source_code: Source code to be corrected. Returns: Corrected source code. \"\"\" # Leave Ansible vaults unmodified if source_code . startswith ( \"$ANSIBLE_VAULT;\" ): return source_code if source_code . startswith ( \"#!\" ): # Skip the shebang line if present, leaving it unmodified eolpos = source_code . find ( \" \\n \" ) + 1 shebang = source_code [: eolpos ] source_code = source_code [ eolpos :] else : shebang = \"\" fixers = [ _fix_truthy_strings , _fix_comments , _fix_jinja_variables , _ruamel_yaml_fixer , _restore_truthy_strings , _restore_double_exclamations , _restore_jinja_variables , _fix_top_level_lists , _add_newline_at_end_of_file , ] for fixer in fixers : source_code = fixer ( source_code ) return shebang + source_code","title":"fix_code()"},{"location":"reference/#yamlfix.services.fix_files","text":"Fix the yaml source code of a list of files. If the input is taken from stdin, it will return the fixed value. Parameters: Name Type Description Default files Files List of files to fix. required Returns: Type Description Optional [ str ] Fixed code retrieved from stdin or None. Source code in yamlfix/services.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def fix_files ( files : Files ) -> Optional [ str ]: \"\"\"Fix the yaml source code of a list of files. If the input is taken from stdin, it will return the fixed value. Args: files: List of files to fix. Returns: Fixed code retrieved from stdin or None. \"\"\" for file_ in files : if isinstance ( file_ , str ): with open ( file_ , \"r\" , encoding = \"utf-8\" ) as file_descriptor : source = file_descriptor . read () file_name = file_ else : source = file_ . read () file_name = file_ . name log . debug ( \"Fixing file %s ...\" , file_name ) fixed_source = fix_code ( source ) if file_name == \"<stdin>\" : return fixed_source if fixed_source != source : if isinstance ( file_ , str ): with open ( file_ , \"w\" , encoding = \"utf-8\" ) as file_descriptor : file_descriptor . write ( fixed_source ) else : file_ . seek ( 0 ) file_ . write ( fixed_source ) file_ . truncate () log . debug ( \"Fixed file %s .\" , file_name ) else : log . debug ( \"Left file %s unmodified.\" , file_name ) return None","title":"fix_files()"},{"location":"reference/#yamlfix.entrypoints","text":"Define the different ways to expose the program functionality. Functions","title":"entrypoints"},{"location":"reference/#yamlfix.entrypoints.ConsoleColorFormatter","text":"Bases: logging . Formatter Custom formatter that prints log levels to the console as colored plus signs. Source code in yamlfix/entrypoints/__init__.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class ConsoleColorFormatter ( logging . Formatter ): \"\"\"Custom formatter that prints log levels to the console as colored plus signs.\"\"\" colors = { logging . DEBUG : GREEN , logging . INFO : CYAN , logging . WARNING : YELLOW , logging . ERROR : RED , } def format ( self , record : logging . LogRecord ) -> str : \"\"\"Format log records as a colored plus sign followed by the log message.\"\"\" color = self . colors . get ( record . levelno , 0 ) self . _style . _fmt = f \"[ \\033 [ { color } m+ \\033 [0m] %(message)s\" # noqa: W0212 return super () . format ( record )","title":"ConsoleColorFormatter"},{"location":"reference/#yamlfix.entrypoints.ConsoleColorFormatter.format","text":"Format log records as a colored plus sign followed by the log message. Source code in yamlfix/entrypoints/__init__.py 27 28 29 30 31 def format ( self , record : logging . LogRecord ) -> str : \"\"\"Format log records as a colored plus sign followed by the log message.\"\"\" color = self . colors . get ( record . levelno , 0 ) self . _style . _fmt = f \"[ \\033 [ { color } m+ \\033 [0m] %(message)s\" # noqa: W0212 return super () . format ( record )","title":"format()"},{"location":"reference/#yamlfix.entrypoints.load_logger","text":"Configure the Logging logger. Parameters: Name Type Description Default verbose bool Set the logging level to Debug. False Source code in yamlfix/entrypoints/__init__.py 34 35 36 37 38 39 40 41 42 43 def load_logger ( verbose : bool = False ) -> None : \"\"\"Configure the Logging logger. Args: verbose: Set the logging level to Debug. \"\"\" log_level = logging . DEBUG if verbose else logging . INFO logging . basicConfig ( stream = sys . stderr , level = log_level ) for handler in logging . getLogger () . handlers : handler . setFormatter ( ConsoleColorFormatter ())","title":"load_logger()"},{"location":"reference/#yamlfix.version","text":"Utilities to retrieve the information of the program version.","title":"version"},{"location":"reference/#yamlfix.version.version_info","text":"Display the version of the program, python and the platform. Source code in yamlfix/version.py 11 12 13 14 15 16 17 18 19 20 def version_info () -> str : \"\"\"Display the version of the program, python and the platform.\"\"\" return dedent ( f \"\"\" \\ ------------------------------------------------------------------ yamlfix: { __version__ } Python: { sys . version . split ( \" \" , maxsplit = 1 )[ 0 ] } Platform: { platform . platform () } ------------------------------------------------------------------\"\"\" )","title":"version_info()"},{"location":"adr/adr/","text":"ADR are short text documents that captures an important architectural decision made along with its context and consequences. graph TD 001[001: High level analysis] 002[002: Initial Program design] 001 -- Extended --> 002 click 001 \"https://lyz-code.github.io/yamlfix/adr/001-high_level_problem_analysis\" _blank click 002 \"https://lyz-code.github.io/yamlfix/adr/002-initial_program_design\" _blank 001:::draft 002:::draft classDef draft fill:#CDBFEA; classDef proposed fill:#B1CCE8; classDef accepted fill:#B1E8BA; classDef rejected fill:#E8B1B1; classDef deprecated fill:#E8B1B1; classDef superseeded fill:#E8E5B1;","title":"Adr"}]}